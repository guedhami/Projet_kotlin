// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.todolist.network

import com.example.todolist.`data`.TaskPriority
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class NetworkItemJsonAdapter(
  moshi: Moshi
) : JsonAdapter<NetworkItem>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "description", "priority",
      "isDone", "deadlineDate", "creationDate", "lastEditDate")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "description")

  private val taskPriorityAdapter: JsonAdapter<TaskPriority> =
      moshi.adapter(TaskPriority::class.java, emptySet(), "priority")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "isDone")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "deadlineDate")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(),
      "creationDate")

  public override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("NetworkItem").append(')') }

  public override fun fromJson(reader: JsonReader): NetworkItem {
    var id: Int? = null
    var description: String? = null
    var priority: TaskPriority? = null
    var isDone: Boolean? = null
    var deadlineDate: Long? = null
    var creationDate: Long? = null
    var lastEditDate: Long? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> description = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("description", "description", reader)
        2 -> priority = taskPriorityAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("priority", "priority", reader)
        3 -> isDone = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("isDone",
            "isDone", reader)
        4 -> deadlineDate = nullableLongAdapter.fromJson(reader)
        5 -> creationDate = longAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("creationDate", "creationDate", reader)
        6 -> lastEditDate = longAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("lastEditDate", "lastEditDate", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return NetworkItem(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        description = description ?: throw Util.missingProperty("description", "description",
            reader),
        priority = priority ?: throw Util.missingProperty("priority", "priority", reader),
        isDone = isDone ?: throw Util.missingProperty("isDone", "isDone", reader),
        deadlineDate = deadlineDate,
        creationDate = creationDate ?: throw Util.missingProperty("creationDate", "creationDate",
            reader),
        lastEditDate = lastEditDate ?: throw Util.missingProperty("lastEditDate", "lastEditDate",
            reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: NetworkItem?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value_.id)
    writer.name("description")
    stringAdapter.toJson(writer, value_.description)
    writer.name("priority")
    taskPriorityAdapter.toJson(writer, value_.priority)
    writer.name("isDone")
    booleanAdapter.toJson(writer, value_.isDone)
    writer.name("deadlineDate")
    nullableLongAdapter.toJson(writer, value_.deadlineDate)
    writer.name("creationDate")
    longAdapter.toJson(writer, value_.creationDate)
    writer.name("lastEditDate")
    longAdapter.toJson(writer, value_.lastEditDate)
    writer.endObject()
  }
}
