// Generated by Dagger (https://dagger.dev).
package com.example.todolist.di;

import android.content.Context;
import com.example.todolist.data.dao.TaskDao;
import com.example.todolist.network.api.RetrofitClient;
import com.example.todolist.network.api.RetrofitClient_Factory;
import com.example.todolist.repository.DefaultTaskRepository;
import com.example.todolist.repository.TaskRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerRepositoryComponent {
  private DaggerRepositoryComponent() {
  }

  public static RepositoryComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements RepositoryComponent.Factory {
    @Override
    public RepositoryComponent create(Context context) {
      Preconditions.checkNotNull(context);
      return new RepositoryComponentImpl(new DefaultRepositoryModule(), context);
    }
  }

  private static final class RepositoryComponentImpl implements RepositoryComponent {
    private final DefaultRepositoryModule defaultRepositoryModule;

    private final RepositoryComponentImpl repositoryComponentImpl = this;

    private Provider<Context> contextProvider;

    private Provider<TaskDao> provideDaoProvider;

    private Provider<RetrofitClient> retrofitClientProvider;

    private RepositoryComponentImpl(DefaultRepositoryModule defaultRepositoryModuleParam,
        Context contextParam) {
      this.defaultRepositoryModule = defaultRepositoryModuleParam;
      initialize(defaultRepositoryModuleParam, contextParam);

    }

    private DefaultTaskRepository defaultTaskRepository() {
      return new DefaultTaskRepository(provideDaoProvider.get(), retrofitClientProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DefaultRepositoryModule defaultRepositoryModuleParam,
        final Context contextParam) {
      this.contextProvider = InstanceFactory.create(contextParam);
      this.provideDaoProvider = DoubleCheck.provider(DatabaseModule_Companion_ProvideDaoFactory.create(contextProvider));
      this.retrofitClientProvider = DoubleCheck.provider(RetrofitClient_Factory.create());
    }

    @Override
    public TaskRepository getRepository() {
      return DefaultRepositoryModule_ProvideRepositoryFactory.provideRepository(defaultRepositoryModule, defaultTaskRepository());
    }
  }
}
