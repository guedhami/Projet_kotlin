// Generated by view binder compiler. Do not edit!
package com.example.todolist.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.todolist.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentEditItemBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final SwitchMaterial datePickerSwitch;

  @NonNull
  public final TextView deadlineTitle;

  @NonNull
  public final Button delete;

  @NonNull
  public final TextInputEditText description;

  @NonNull
  public final TextView pickedDate;

  @NonNull
  public final Spinner priority;

  @NonNull
  public final MaterialToolbar topAppBar;

  private FragmentEditItemBinding(@NonNull CoordinatorLayout rootView,
      @NonNull SwitchMaterial datePickerSwitch, @NonNull TextView deadlineTitle,
      @NonNull Button delete, @NonNull TextInputEditText description, @NonNull TextView pickedDate,
      @NonNull Spinner priority, @NonNull MaterialToolbar topAppBar) {
    this.rootView = rootView;
    this.datePickerSwitch = datePickerSwitch;
    this.deadlineTitle = deadlineTitle;
    this.delete = delete;
    this.description = description;
    this.pickedDate = pickedDate;
    this.priority = priority;
    this.topAppBar = topAppBar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentEditItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentEditItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_edit_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentEditItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.date_picker_switch;
      SwitchMaterial datePickerSwitch = ViewBindings.findChildViewById(rootView, id);
      if (datePickerSwitch == null) {
        break missingId;
      }

      id = R.id.deadline_title;
      TextView deadlineTitle = ViewBindings.findChildViewById(rootView, id);
      if (deadlineTitle == null) {
        break missingId;
      }

      id = R.id.delete;
      Button delete = ViewBindings.findChildViewById(rootView, id);
      if (delete == null) {
        break missingId;
      }

      id = R.id.description;
      TextInputEditText description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.picked_date;
      TextView pickedDate = ViewBindings.findChildViewById(rootView, id);
      if (pickedDate == null) {
        break missingId;
      }

      id = R.id.priority;
      Spinner priority = ViewBindings.findChildViewById(rootView, id);
      if (priority == null) {
        break missingId;
      }

      id = R.id.topAppBar;
      MaterialToolbar topAppBar = ViewBindings.findChildViewById(rootView, id);
      if (topAppBar == null) {
        break missingId;
      }

      return new FragmentEditItemBinding((CoordinatorLayout) rootView, datePickerSwitch,
          deadlineTitle, delete, description, pickedDate, priority, topAppBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
