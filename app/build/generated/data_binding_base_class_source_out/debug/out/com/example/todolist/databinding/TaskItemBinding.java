// Generated by view binder compiler. Do not edit!
package com.example.todolist.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.FrameLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.todolist.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TaskItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FrameLayout checkDone;

  @NonNull
  public final FrameLayout deleteButton;

  @NonNull
  public final FrameLayout info;

  @NonNull
  public final ConstraintLayout task;

  @NonNull
  public final TextView taskDate;

  @NonNull
  public final TextView taskDescription;

  @NonNull
  public final TextView taskImportance;

  @NonNull
  public final CheckBox taskStatus;

  private TaskItemBinding(@NonNull ConstraintLayout rootView, @NonNull FrameLayout checkDone,
      @NonNull FrameLayout deleteButton, @NonNull FrameLayout info, @NonNull ConstraintLayout task,
      @NonNull TextView taskDate, @NonNull TextView taskDescription,
      @NonNull TextView taskImportance, @NonNull CheckBox taskStatus) {
    this.rootView = rootView;
    this.checkDone = checkDone;
    this.deleteButton = deleteButton;
    this.info = info;
    this.task = task;
    this.taskDate = taskDate;
    this.taskDescription = taskDescription;
    this.taskImportance = taskImportance;
    this.taskStatus = taskStatus;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TaskItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TaskItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.task_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TaskItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.check_done;
      FrameLayout checkDone = ViewBindings.findChildViewById(rootView, id);
      if (checkDone == null) {
        break missingId;
      }

      id = R.id.delete_button;
      FrameLayout deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.info;
      FrameLayout info = ViewBindings.findChildViewById(rootView, id);
      if (info == null) {
        break missingId;
      }

      id = R.id.task;
      ConstraintLayout task = ViewBindings.findChildViewById(rootView, id);
      if (task == null) {
        break missingId;
      }

      id = R.id.task_date;
      TextView taskDate = ViewBindings.findChildViewById(rootView, id);
      if (taskDate == null) {
        break missingId;
      }

      id = R.id.task_description;
      TextView taskDescription = ViewBindings.findChildViewById(rootView, id);
      if (taskDescription == null) {
        break missingId;
      }

      id = R.id.task_importance;
      TextView taskImportance = ViewBindings.findChildViewById(rootView, id);
      if (taskImportance == null) {
        break missingId;
      }

      id = R.id.task_status;
      CheckBox taskStatus = ViewBindings.findChildViewById(rootView, id);
      if (taskStatus == null) {
        break missingId;
      }

      return new TaskItemBinding((ConstraintLayout) rootView, checkDone, deleteButton, info, task,
          taskDate, taskDescription, taskImportance, taskStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
